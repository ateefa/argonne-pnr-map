# Generated by Django 3.0.9 on 2020-08-12 10:06

from django.db import migrations
from django.contrib.gis.geos import fromstr

from django.core.files import File
import json
import os
from os.path import dirname, join
from urllib.request import urlretrieve

def modify_from_data_tourism(apps, schema_editor):
    PointOfInterest = apps.get_model('tourism', 'PointOfInterest')
    MainRepresentation = apps.get_model('tourism', 'MainRepresentation')


    flux_dir = "flux-7559-202008071000"
    root_dir = join(dirname(dirname(__file__)), 'data/tourism', flux_dir, 'objects')

    i = 0
    for subdir, dirs, files in os.walk(root_dir):
        for file in files:
            i += 1
            with open(join(subdir, file)) as f:
                obj = json.load(f)
            if 'PointOfInterest' in obj['@type']:
                # Find the corresponding POI
                try:
                    poi = PointOfInterest.objects.get(dt_id = obj["@id"])
                    main_media = obj['hasMainRepresentation'][0]
                except (KeyError, TypeError, IndexError):
                    continue

                # Create a new MainRepresentation img associated with this poi
                print(i, '\t', poi.name, ',', poi.city)
                mr = MainRepresentation(poi=poi)

                # Retrieve additionnal information
                if "ebucore:hasAnnotation" in main_media:
                    annotation = main_media["ebucore:hasAnnotation"][0]
                    if "ebucore:title" in annotation:
                        mr.title = annotation["ebucore:title"]["fr"][0]
                    if "credits" in annotation:
                        mr.credits = annotation["credits"][0]
                
                # Retrieve img URL
                try:
                    img_url = main_media["ebucore:hasRelatedResource"][0]["ebucore:locator"][0]
                except:
                    print("==== [No img url found] ====", poi.name)
                    continue
                
                img_name = os.path.basename(img_url)
                temp_filename, _ = urlretrieve(img_url)
                content = File(open(temp_filename, 'rb'))
                
                mr.picture.save(img_name, content, save=True)


def delete_data_tourism(apps, schema_editor):
    MainRepresentation = apps.get_model('tourism', 'MainRepresentation')
    db_alias = schema_editor.connection.alias
    
    for mr in MainRepresentation.objects.using(db_alias).all():
        mr.delete()
    
class Migration(migrations.Migration):
    dependencies = [
        ('tourism', '0008_auto_20200812_1206'),
    ]

    operations = [
        migrations.RunPython(modify_from_data_tourism, delete_data_tourism)
    ]
