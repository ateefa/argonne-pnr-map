# Generated by Django 3.0.9 on 2020-08-12 10:33

from django.db import migrations
from django.contrib.gis.geos import fromstr

import datetime
import json
import os
from os.path import dirname, join

def parse_dt_date(dt_date):
    return datetime.date(*map(int, dt_date.split("T")[0].split("-")))

def parse_dt_time(dt_time):
    return datetime.time(*map(int, dt_time.split(":")))


def modify_from_data_tourism(apps, schema_editor):
    PointOfInterest = apps.get_model('tourism', 'PointOfInterest')
    OpeningSchema = apps.get_model('tourism', 'OpeningHoursSchema')
    OpeningHours = apps.get_model('tourism', 'OpeningHours')
    # weekdays_reverse = {v: k for k, v in OpeningHours.WEEKDAYS}
    weekdays_reverse = {'Lundi': 1, 'Mardi': 2, 'Mercredi': 3, 'Jeudi': 4, 'Vendredi': 5, 'Samedi': 6, 'Dimanche': 7}


    flux_dir = "flux-7559-202008071000"
    root_dir = join(dirname(dirname(__file__)), 'data/tourism', flux_dir, 'objects')

    i = 0
    for subdir, dirs, files in os.walk(root_dir):
        for file in files:
            i += 1
            with open(join(subdir, file)) as f:
                obj = json.load(f)
            if 'PointOfInterest' in obj['@type']:
                # Find the corresponding POI
                try:
                    poi = PointOfInterest.objects.get(dt_id = obj["@id"])
                    opening_hours_spec = obj['isLocatedAt'][0]["schema:openingHoursSpecification"]
                except (KeyError, TypeError, IndexError):
                    continue
                
                for opening_hours in opening_hours_spec:
                    ## First step: Create a new openingSchema if necessary
                    schema = OpeningSchema()
                    if "schema:validFrom" in opening_hours:
                        schema.valid_from = parse_dt_date(opening_hours["schema:validFrom"])
                    else:
                        schema.valid_from = OpeningSchema._meta.get_field("valid_from").get_default()
                    if "schema:validThrough" in opening_hours:
                        schema.valid_through = parse_dt_date(opening_hours["schema:validThrough"])
                    else:
                        schema.valid_through = OpeningSchema._meta.get_field("valid_through").get_default()
                    
                    # Datatourism's structure for openinghours allows duplicates
                    # for openingSchema
                    # Fetch the relevant openingSchema if it already exists
                    existing_schema_query = OpeningSchema.objects.filter(
                        valid_from=schema.valid_from,
                        valid_through=schema.valid_through,
                        poi=poi)
                    if existing_schema_query.count() != 0: # already exists
                        schema = existing_schema_query[0]
                    else:  # first time it is seen: Save it!
                        schema.poi = poi
                        schema.save()

                    ## Second step: Add Opening Hours for Each day
                    if not "schema:dayOfWeek" in opening_hours:
                        print("="*5, poi.name)
                    else:
                        for day_of_week in opening_hours["schema:dayOfWeek"]:
                            day_hours = OpeningHours()
                            day_hours.schema = schema
                            day_hours.weekday = weekdays_reverse[day_of_week['rdfs:label']['fr'][0]]
                            if "schema:opens" in opening_hours:
                                day_hours.from_hour = parse_dt_time(opening_hours["schema:opens"])
                            if "schema:closes" in opening_hours:
                                day_hours.to_hour = parse_dt_time(opening_hours["schema:closes"])
                            day_hours.save()
                
                print(i, '\t', poi.name)


def delete_data_tourism(apps, schema_editor):
    # PointOfInterest = apps.get_model('tourism', 'PointOfInterest')
    OpeningSchema = apps.get_model('tourism', 'OpeningHoursSchema')
    # OpeningHours = apps.get_model('tourism', 'OpeningHours')
    db_alias = schema_editor.connection.alias
    
    for oh in OpeningSchema.objects.using(db_alias).all():
        oh.delete()
    
class Migration(migrations.Migration):
    dependencies = [
        ('tourism', '0010_openinghours_openinghoursschema'),
    ]

    operations = [
        migrations.RunPython(modify_from_data_tourism, delete_data_tourism)
    ]
